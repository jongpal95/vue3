### Props [https://www.gymcoding.co/0a8ab4db-dfda-4aa5-b8a0-fd5d4597f219/]
: 컴포넌트에 등록할 수 있는 사용자 정의 속성
  부모 컴포넌트에서 자식 컴포넌로 데이터를 전달하는 것
  자식 컴포넌트에서 Props를 정의함으로써 외부에서 데이터를 전달 받을 수 있음


## Props 선언
  - 문자열 배열 선언
  - 객체문법 선언(recommand)
    type  => 모든 기본 생성자 또는 모든 사용자 정의 타입, 배열 사용하여 여러개 타입 선언 가능
    defulat => 속성이 비어 있거나 undefined 전달 받은 경우 사용 될 기본값, 객체 또는 배열 타입인 경우 기본값을 반환하는 팩토리함수를 사용하여 반환해야 함
    required  => 속성의 필수값 여부, true/false
    validator => 유호성 검사 / 콘솔에서 경고표시


## Props 사용
  - 선언된 props를 <template>에서 바로 사용 가능
  - setup()함수의 첫 번째 매개변수로 props객체를 받아 사용 가능
  - 컴포넌트 인스턴스(this)의 $props 내장 객체로 접근 가능(OptionsAPI)
    
    
* 선언할 때는 CamelCase
  부모 컴포넌트에서 값을 전달할 때는 kebab-case


## 단방향 데이터 흐름
: 모든 props는 상쉬 속성과 하위 속성간 단방향 바인딩으로 형성되어 있음
  하위에서 상위로 전달되지 않음 -> 하위에서 속성 변경 실수로 상위 속성을 변경하여 앱의 데이트 흐름을 이해하기 어렵게 만드는 것을 방지
  
  * 만약 하위에서 상위 속성을 변경하고 싶은 경우 자식 컴포넌트에서 부모 컴포넌트로 이벤트를 올려주어 부모 컴포넌트가 스스로 속성을 변경할 수 있도록 구현해야 함

    부모 컴포넌트 -( props )-> 자식 컴포넌트
    자식 컴포넌트 -( emit )-> 부모 컴포넌트


## 객체 또는 배열의 props 업데이트
: 레퍼런스 타입(객체, 배열)을 속성으로 전달할 때 javascript 언어 특성(객체 속성 접근 가능한 점)에 따라 단방향 데이터 흐름이 깨질 수 있으니 주의해야 함
  emit으로 접근을 기본으로 할 것


## Boolean Casting
: 속성을 선언하는 것만으로도 true를 전달하는 것과 같은 특별한 캐스팅 규칙을 가지고 있음