### Event [https://www.gymcoding.co/db426673-f530-4925-9794-9f63ba943f02/]


## 자식 컴포넌트에서 부모 컴포넌트로 이벤트를 발생시키기
 - 컴포넌트 내장 method $emit
  : 자식 컴포넌트의 요소의 이벤트에서 $emit 내장 메서드 호출
   ex> 
        ChildVue.vue
        <이벤트 발생 요소 $emit('handlerName', parameter,,,)></>

        ParentVue.vue
        <자식 컴포넌트 @(v-on단축어)handler-name="handlerName"></>
        * 이 때 자식 컴포넌트를 사용하는 부모 컴포넌트에는 event handler가 setup함수를 통해 반환되어야 함

 - setup함수 두 번째 매개변수 context객체의 emit method
  : 자식 컴포넌트의 setup함수에서 핸들러 구현
   ex>
        ChildVue.vue
        <이벤트 발생 요소 @click='handlerName'></>

        setup(props, context.emit){
          const handlerName = () => {
            context.emit('handlerName', parameter,,,);
          };

          return {
            handlerName
          }
        }

        ParentVue.vue
        <자식 컴포넌트 @(v-on단축어)handler-name="handlerName"></>


## 이벤트 선언하기
: vue3부터 emits옵션을 사용해 이벤트 선언이 가능
  이벤트 선언은 선택사항이지만 문서화를 위해 선언하는 것을 권장
 - 문자열 배열 선언
 - 객체문법 선언
   > 객체문법으로 선언할 경우 validation 로직을 추가할 수 있음 / validation에 걸리더라도 이벤트가 발생은 됨(validation 없을 경우 null assign)


## v-model 구현하기
: 컴포넌트를 만든 후 해당 컴포넌트에 v-model을 적용하려면 @update:modelValue 이벤트를 사용하여 v-model을 만들 수 있음


## v-model 전달인자
: 기본적으로 v-model은 컴포넌트에서 props.modelValue와 update:modelValue이벤트로 사용함, 하지만 전달인자(Arguments)를 사용하여 이런 이름을 수정 가능
  ex> v-model:(Arguments)

# 다중 v-model 바인딩
: 전달인자를 사용하여 다중 바인딩 사용 가능

const isVisibleModalHandler = () => {
  isVisibleModalHandler.value = !isVisibleModalHandler.value;
}

$emits.isVisibleModalHandler()

{emits}